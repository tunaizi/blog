import{_ as s,r as n,i as a,a as l}from"./chunks/framework.233c72da.js";const o=JSON.parse('{"title":"Options: Rendering","description":"","frontmatter":{},"headers":[{"level":2,"title":"template","slug":"template","link":"#template","children":[]},{"level":2,"title":"render","slug":"render","link":"#render","children":[]},{"level":2,"title":"compilerOptions","slug":"compileroptions","link":"#compileroptions","children":[]},{"level":2,"title":"slots","slug":"slots","link":"#slots","children":[]}],"relativePath":"api/options-rendering.md","filePath":"api/options-rendering.md"}');const e=s({name:"api/options-rendering.md"},[["render",function(s,o,e,p,t,r){return n(),a("div",null,o[0]||(o[0]=[l('<h1 id="options-rendering" tabindex="-1">Options: Rendering <a class="header-anchor" href="#options-rendering" aria-label="Permalink to &quot;Options: Rendering {#options-rendering}&quot;">​</a></h1><h2 id="template" tabindex="-1">template <a class="header-anchor" href="#template" aria-label="Permalink to &quot;template {#template}&quot;">​</a></h2><p>A string template for the component.</p><ul><li><p><strong>Type</strong></p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">interface</span><span style="color:#BABED8;"> </span><span style="color:#FFCB6B;">ComponentOptions</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#BABED8;">  </span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">?:</span><span style="color:#BABED8;"> </span><span style="color:#FFCB6B;">string</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div></li><li><p><strong>Details</strong></p><p>A template provided via the <code>template</code> option will be compiled on-the-fly at runtime. It is only supported when using a build of Vue that includes the template compiler. The template compiler is <strong>NOT</strong> included in Vue builds that have the word <code>runtime</code> in their names, e.g. <code>vue.runtime.esm-bundler.js</code>. Consult the <a href="https://github.com/vuejs/core/tree/main/packages/vue#which-dist-file-to-use" target="_blank" rel="noreferrer">dist file guide</a> for more details about the different builds.</p><p>If the string starts with <code>#</code> it will be used as a <code>querySelector</code> and use the selected element&#39;s <code>innerHTML</code> as the template string. This allows the source template to be authored using native <code>&lt;template&gt;</code> elements.</p><p>If the <code>render</code> option is also present in the same component, <code>template</code> will be ignored.</p><p>If the root component of your application doesn&#39;t have a <code>template</code> or <code>render</code> option specified, Vue will try to use the <code>innerHTML</code> of the mounted element as the template instead.</p><div class="warning custom-block"><p class="custom-block-title">Security Note</p><p>Only use template sources that you can trust. Do not use user-provided content as your template. See <a href="/guide/best-practices/security.html#rule-no-1-never-use-non-trusted-templates">Security Guide</a> for more details.</p></div></li></ul><h2 id="render" tabindex="-1">render <a class="header-anchor" href="#render" aria-label="Permalink to &quot;render {#render}&quot;">​</a></h2><p>A function that programmatically returns the virtual DOM tree of the component.</p><ul><li><p><strong>Type</strong></p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">interface</span><span style="color:#BABED8;"> </span><span style="color:#FFCB6B;">ComponentOptions</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#BABED8;">  </span><span style="color:#F07178;">render</span><span style="color:#89DDFF;">?(</span><span style="color:#89DDFF;font-style:italic;">this</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#FFCB6B;">ComponentPublicInstance</span><span style="color:#89DDFF;">)</span><span style="color:#BABED8;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#BABED8;"> </span><span style="color:#FFCB6B;">VNodeChild</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#C792EA;">type</span><span style="color:#BABED8;"> </span><span style="color:#FFCB6B;">VNodeChild</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#FFCB6B;">VNodeChildAtom</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">|</span><span style="color:#BABED8;"> </span><span style="color:#FFCB6B;">VNodeArrayChildren</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#C792EA;">type</span><span style="color:#BABED8;"> </span><span style="color:#FFCB6B;">VNodeChildAtom</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">=</span></span>\n<span class="line"><span style="color:#BABED8;">  </span><span style="color:#89DDFF;">|</span><span style="color:#BABED8;"> </span><span style="color:#FFCB6B;">VNode</span></span>\n<span class="line"><span style="color:#BABED8;">  </span><span style="color:#89DDFF;">|</span><span style="color:#BABED8;"> </span><span style="color:#FFCB6B;">string</span></span>\n<span class="line"><span style="color:#BABED8;">  </span><span style="color:#89DDFF;">|</span><span style="color:#BABED8;"> </span><span style="color:#FFCB6B;">number</span></span>\n<span class="line"><span style="color:#BABED8;">  </span><span style="color:#89DDFF;">|</span><span style="color:#BABED8;"> </span><span style="color:#FFCB6B;">boolean</span></span>\n<span class="line"><span style="color:#BABED8;">  </span><span style="color:#89DDFF;">|</span><span style="color:#BABED8;"> </span><span style="color:#FFCB6B;">null</span></span>\n<span class="line"><span style="color:#BABED8;">  </span><span style="color:#89DDFF;">|</span><span style="color:#BABED8;"> </span><span style="color:#FFCB6B;">undefined</span></span>\n<span class="line"><span style="color:#BABED8;">  </span><span style="color:#89DDFF;">|</span><span style="color:#BABED8;"> </span><span style="color:#FFCB6B;">void</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#C792EA;">type</span><span style="color:#BABED8;"> </span><span style="color:#FFCB6B;">VNodeArrayChildren</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> (</span><span style="color:#FFCB6B;">VNodeArrayChildren</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">|</span><span style="color:#BABED8;"> </span><span style="color:#FFCB6B;">VNodeChildAtom</span><span style="color:#BABED8;">)[]</span></span></code></pre></div></li><li><p><strong>Details</strong></p><p><code>render</code> is an alternative to string templates that allows you to leverage the full programmatic power of JavaScript to declare the render output of the component.</p><p>Pre-compiled templates, for example those in Single-File Components, are compiled into the <code>render</code> option at build time. If both <code>render</code> and <code>template</code> are present in a component, <code>render</code> will take higher priority.</p></li><li><p><strong>See also</strong></p><ul><li><a href="/guide/extras/rendering-mechanism.html">Rendering Mechanism</a></li><li><a href="/guide/extras/render-function.html">Render Functions</a></li></ul></li></ul><h2 id="compileroptions" tabindex="-1">compilerOptions <a class="header-anchor" href="#compileroptions" aria-label="Permalink to &quot;compilerOptions {#compileroptions}&quot;">​</a></h2><p>Configure runtime compiler options for the component&#39;s template.</p><ul><li><p><strong>Type</strong></p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">interface</span><span style="color:#BABED8;"> </span><span style="color:#FFCB6B;">ComponentOptions</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#BABED8;">  </span><span style="color:#F07178;">compilerOptions</span><span style="color:#89DDFF;">?:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#BABED8;">    </span><span style="color:#F07178;">isCustomElement</span><span style="color:#89DDFF;">?:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">tag</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#FFCB6B;">string</span><span style="color:#89DDFF;">)</span><span style="color:#BABED8;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#BABED8;"> </span><span style="color:#FFCB6B;">boolean</span></span>\n<span class="line"><span style="color:#BABED8;">    </span><span style="color:#F07178;">whitespace</span><span style="color:#89DDFF;">?:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">condense</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">|</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">preserve</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;"> </span><span style="color:#676E95;font-style:italic;">// default: &#39;condense&#39;</span></span>\n<span class="line"><span style="color:#BABED8;">    </span><span style="color:#F07178;">delimiters</span><span style="color:#89DDFF;">?:</span><span style="color:#BABED8;"> [</span><span style="color:#FFCB6B;">string</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> </span><span style="color:#FFCB6B;">string</span><span style="color:#BABED8;">] </span><span style="color:#676E95;font-style:italic;">// default: [&#39;{{&#39;, &#39;}}&#39;]</span></span>\n<span class="line"><span style="color:#BABED8;">    </span><span style="color:#F07178;">comments</span><span style="color:#89DDFF;">?:</span><span style="color:#BABED8;"> </span><span style="color:#FFCB6B;">boolean</span><span style="color:#BABED8;"> </span><span style="color:#676E95;font-style:italic;">// default: false</span></span>\n<span class="line"><span style="color:#BABED8;">  </span><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div></li><li><p><strong>Details</strong></p><p>This config option is only respected when using the full build (i.e. the standalone <code>vue.js</code> that can compile templates in the browser). It supports the same options as the app-level <a href="/api/application.html#app-config-compileroptions">app.config.compilerOptions</a>, and has higher priority for the current component.</p></li><li><p><strong>See also</strong> <a href="/api/application.html#app-config-compileroptions">app.config.compilerOptions</a></p></li></ul><h2 id="slots" tabindex="-1">slots<sup class="vt-badge ts"></sup> <a class="header-anchor" href="#slots" aria-label="Permalink to &quot;slots&lt;sup class=&quot;vt-badge ts&quot;/&gt; {#slots}&quot;">​</a></h2><p>An option to assist with type inference when using slots programmatically in render functions. Only supported in 3.3+.</p><ul><li><p><strong>Details</strong></p><p>This option&#39;s runtime value is not used. The actual types should be declared via type casting using the <code>SlotsType</code> type helper:</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">SlotsType</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">vue</span><span style="color:#89DDFF;">&#39;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#82AAFF;">defineComponent</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#BABED8;">  </span><span style="color:#F07178;">slots</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> Object </span><span style="color:#89DDFF;font-style:italic;">as</span><span style="color:#BABED8;"> </span><span style="color:#FFCB6B;">SlotsType</span><span style="color:#89DDFF;">&lt;{</span></span>\n<span class="line"><span style="color:#BABED8;">    </span><span style="color:#F07178;">default</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span><span style="color:#BABED8;"> </span><span style="color:#F07178;">foo</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#FFCB6B;">string</span><span style="color:#89DDFF;">;</span><span style="color:#BABED8;"> </span><span style="color:#F07178;">bar</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#FFCB6B;">number</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#BABED8;">    </span><span style="color:#F07178;">item</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span><span style="color:#BABED8;"> </span><span style="color:#F07178;">data</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#FFCB6B;">number</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#BABED8;">  </span><span style="color:#89DDFF;">}&gt;,</span></span>\n<span class="line"><span style="color:#BABED8;">  </span><span style="color:#F07178;">setup</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">props</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span><span style="color:#BABED8;"> </span><span style="color:#BABED8;font-style:italic;">slots</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">})</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#F07178;">    </span><span style="color:#BABED8;">expectType</span><span style="color:#89DDFF;">&lt;</span></span>\n<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">undefined</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">|</span><span style="color:#F07178;"> (</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">scope</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> foo</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">string</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> bar</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">number</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">})</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">any</span><span style="color:#F07178;">)</span></span>\n<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">&gt;</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">slots</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">default</span><span style="color:#F07178;">)</span></span>\n<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">expectType</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">undefined</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">|</span><span style="color:#F07178;"> (</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">scope</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> data</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">number</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">})</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">any</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">&gt;</span><span style="color:#F07178;">(</span></span>\n<span class="line"><span style="color:#F07178;">      </span><span style="color:#BABED8;">slots</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">item</span></span>\n<span class="line"><span style="color:#F07178;">    )</span></span>\n<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#BABED8;">)</span></span></code></pre></div></li></ul>',13)]))}]]);export{o as __pageData,e as default};
