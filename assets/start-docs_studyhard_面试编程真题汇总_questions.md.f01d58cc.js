import{_ as i,r as s,i as e,a}from"./chunks/framework.8a6edf47.js";const h=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[{"level":2,"title":"英语流利说","slug":"英语流利说","link":"#英语流利说","children":[]},{"level":2,"title":"携程","slug":"携程","link":"#携程","children":[]},{"level":2,"title":"比心APP","slug":"比心app","link":"#比心app","children":[]},{"level":2,"title":"百度","slug":"百度","link":"#百度","children":[]},{"level":2,"title":"京东凹凸实验室","slug":"京东凹凸实验室","link":"#京东凹凸实验室","children":[]},{"level":2,"title":"字节跳动","slug":"字节跳动","link":"#字节跳动","children":[]},{"level":2,"title":"字节2","slug":"字节2","link":"#字节2","children":[]}],"relativePath":"start-docs/studyhard/面试编程真题汇总/questions.md","filePath":"start-docs/studyhard/面试编程真题汇总/questions.md"}'),n={name:"start-docs/studyhard/面试编程真题汇总/questions.md"};function p(t,l,o,c,r,u){return s(),e("div",null,l[0]||(l[0]=[a(`<h2 id="英语流利说" tabindex="-1">英语流利说 <a class="header-anchor" href="#英语流利说" aria-label="Permalink to &quot;英语流利说&quot;">​</a></h2><ul><li>一面 <ul><li>微前端描述下, 怎么协同开发,注意事项</li><li>场景问题 <ul><li>两个请求并行发送，如果其中一个请求出错，就用默认值代替，怎么实现</li><li>页面有两个相同的请求怎么复用</li></ul></li><li>react 生命周期</li><li>react通信</li><li>跨域通信有哪些</li><li>http缓存</li><li>懒加载</li><li>commonjs 和 es module区别</li><li>tree sharking原理</li><li>loader 会 plugins区别</li><li>防抖和节流区别，大概实现</li><li>了解哪些新技术</li></ul></li><li>二面 <ul><li>介绍一下项目亮点</li><li>介绍一下微前端</li><li>说一下npm包管理机制</li><li>A插件依赖D插件版本是1.0.1，B插件依赖D插件版本是1.0.2，C插件依赖D插件1.1.0，那么npm i 之后，下载了几个版本的D插件</li><li>HTTP常见的状态码 ，401 403分别是什么， 常见的请求头响应头有哪</li><li>说一下webpack配置，常用的loader、plugin</li><li>场景题目<div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark"><code><span class="line"><span style="color:#e1e4e8;">if(a == 1) {</span></span>
<span class="line"><span style="color:#e1e4e8;">    console.log(a);</span></span>
<span class="line"><span style="color:#e1e4e8;">  }</span></span>
<span class="line"><span style="color:#e1e4e8;">  // 控制台会报错么  --- 报错</span></span>
<span class="line"><span style="color:#e1e4e8;">  // 如果报错是什么类型的错误  ReferenceError: a is not defind</span></span></code></pre></div></li></ul></li><li>三面 <ul><li>介绍项目</li><li>你充当的角色</li><li>你平时是如何学习的</li><li>对自己的规划</li><li>别人怎么评价你的</li></ul></li></ul><h2 id="携程" tabindex="-1">携程 <a class="header-anchor" href="#携程" aria-label="Permalink to &quot;携程&quot;">​</a></h2><ul><li>一面 <ul><li>介绍微前端</li><li>乾坤框架怎么实现的沙盒机制</li><li>手写一个单例模式</li><li>手写一个发布订阅模式</li><li>手写一个redux的compose函数</li><li>手写一个组合继承</li><li>垃圾回收机制了解么，介绍一下: 标记回收和计数两种方式</li><li>自定义hooks和函数有什么区别</li></ul></li><li>二面 <ul><li>事件循环输出顺序问题</li><li>实现函数异步请求成功后就返回，失败后重试max次</li><li>前端怎么埋点监控</li><li>hooks为什么不能写在if 语句里面</li><li>useCallback的实现原理</li><li>怎么画1px像素线，逻辑像素,物理像素的概念</li><li>自己写的mock服务是怎么实现的，为什么不在webpack里用相关插件</li></ul></li><li>三面 <ul><li>三面也是没问技术</li><li>公司是做什么的，介绍下公司产品</li><li>你现在充当的团队角色</li><li>你现在是一个管理者了，为什么离职了</li><li>将来的规划</li></ul></li></ul><h2 id="比心app" tabindex="-1">比心APP <a class="header-anchor" href="#比心app" aria-label="Permalink to &quot;比心APP&quot;">​</a></h2><ul><li>一面 <ul><li>介绍下项目</li><li>说一下微前端实现</li><li>写一个Promise.all函数</li><li>写一个发布订阅模式</li><li>一道setTimeout事件循环的题目</li><li>手写题实现电话号码隔位显示（3 4 4）</li><li>算法题[0, 2, 3, 0, 5, 0, 0]将0全部移动到后面去</li></ul></li><li>二面 <ul><li>介绍下项目亮点</li><li>说一下redux如何使用</li><li>redux源码介绍下</li><li>你说你angular, vue, react都使用过，说一下三者的区别</li><li>了解缓存么 大概讲一下</li><li>解释下https</li><li>介绍几个git常见的操作命令</li></ul></li><li>三面 <ul><li>介绍项目亮点</li><li>react通信是怎么样的</li><li>react-redux中connect怎么连接组件的</li><li>为什么要离职</li><li>你最擅长的是什么</li></ul></li></ul><h2 id="百度" tabindex="-1">百度 <a class="header-anchor" href="#百度" aria-label="Permalink to &quot;百度&quot;">​</a></h2><ul><li>一面 <ul><li>介绍一下微前端</li><li>乾坤框架源码看过么</li><li>写一个自定义hooks，useDiff</li><li>数组去重方法越多越好</li><li>写一个匹配邮箱的正则</li><li>实现函数</li></ul><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark"><code><span class="line"><span style="color:#e1e4e8;">function repeat(s, count) {}</span></span>
<span class="line"><span style="color:#e1e4e8;"></span></span>
<span class="line"><span style="color:#e1e4e8;">  repeat(&#39;s&#39;, 3) // 输出 ‘sss’</span></span></code></pre></div><ul><li>函数实现</li></ul><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark"><code><span class="line"><span style="color:#e1e4e8;">// 正则匹配标签名 输出div p span</span></span>
<span class="line"><span style="color:#e1e4e8;">  &lt;div&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;">      &lt;p&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;">        &lt;span&gt;&lt;/span&gt;   </span></span>
<span class="line"><span style="color:#e1e4e8;">      &lt;/p&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;">      &lt;span&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;">      &lt;/span&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;">  &lt;/div&gt;</span></span></code></pre></div><ul><li>实现一个深拷贝</li><li>实现函数统计字符串里面出现次数最多的字符</li><li>有做过什么优化么</li></ul></li><li>二面 <ul><li>介绍下微前端</li><li>hooks常用的api有哪些</li><li>useState,useEffect,useRef,useMemo在存储数据方面有什么区别</li><li>hooks组件怎么向外传递方法</li><li>写一个三列等距布局，越多越好</li><li>写一个公共组件需要注意哪些</li><li>写一个表单生成组件 <ul><li>生成一个完整的组件</li><li>表单填入的值，可以返回出去<div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark"><code><span class="line"><span style="color:#e1e4e8;">const config = [</span></span>
<span class="line"><span style="color:#e1e4e8;">      {</span></span>
<span class="line"><span style="color:#e1e4e8;">          type: &#39;input&#39;,</span></span>
<span class="line"><span style="color:#e1e4e8;">          name: &#39;name&#39;,</span></span>
<span class="line"><span style="color:#e1e4e8;">          key: &#39;name&#39;</span></span>
<span class="line"><span style="color:#e1e4e8;">      },</span></span>
<span class="line"><span style="color:#e1e4e8;"></span></span>
<span class="line"><span style="color:#e1e4e8;">      {</span></span>
<span class="line"><span style="color:#e1e4e8;">          type: &#39;select&#39;,</span></span>
<span class="line"><span style="color:#e1e4e8;">          name: &#39;work&#39;,</span></span>
<span class="line"><span style="color:#e1e4e8;">          key: &#39;work&#39;,</span></span>
<span class="line"><span style="color:#e1e4e8;">          options: []</span></span>
<span class="line"><span style="color:#e1e4e8;">      }</span></span>
<span class="line"><span style="color:#e1e4e8;">  ]</span></span>
<span class="line"><span style="color:#e1e4e8;">  &lt;FormC config={config} /&gt;</span></span></code></pre></div></li></ul></li><li>你ts用的多么，说几个高级用法</li><li>介绍下interface和type的区别</li></ul></li><li>三面 <ul><li>介绍下项目</li><li>为什么要重构项目</li><li>为什么要做微前端</li><li>详细说一下机器学习做的事情</li><li>你觉得AI智能给前端带来的变化</li></ul></li></ul><h2 id="京东凹凸实验室" tabindex="-1">京东凹凸实验室 <a class="header-anchor" href="#京东凹凸实验室" aria-label="Permalink to &quot;京东凹凸实验室&quot;">​</a></h2><ul><li>介绍下微前端实现方式，以及你们是怎么做的</li><li>乾坤框架源码看过没</li><li>commonjs 和 es module区别<div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark"><code><span class="line"><span style="color:#e1e4e8;">1：</span></span>
<span class="line"><span style="color:#e1e4e8;">  // a.js</span></span>
<span class="line"><span style="color:#e1e4e8;">  module.exports = {};</span></span>
<span class="line"><span style="color:#e1e4e8;"></span></span>
<span class="line"><span style="color:#e1e4e8;">  exports = {</span></span>
<span class="line"><span style="color:#e1e4e8;">      name: &#39;json&#39;</span></span>
<span class="line"><span style="color:#e1e4e8;">  };</span></span>
<span class="line"><span style="color:#e1e4e8;"></span></span>
<span class="line"><span style="color:#e1e4e8;">  // b.js</span></span>
<span class="line"><span style="color:#e1e4e8;">  const a = require(&#39;./a.js&#39;); // 输出什么</span></span>
<span class="line"><span style="color:#e1e4e8;">  2:</span></span>
<span class="line"><span style="color:#e1e4e8;">  // a.js</span></span>
<span class="line"><span style="color:#e1e4e8;">  module.exports = function a() {}</span></span>
<span class="line"><span style="color:#e1e4e8;"></span></span>
<span class="line"><span style="color:#e1e4e8;">  // b.js </span></span>
<span class="line"><span style="color:#e1e4e8;">  // 在b中用es6 module语法怎么引入</span></span></code></pre></div></li><li>介绍下浏览器缓存机制</li><li>webpack打包原理是怎么样的</li><li>webpack插件写过没，介绍下原理</li><li>webpack5介绍下</li><li>看你用过react介绍下fiber架构</li><li>esbuild知道么介绍下</li><li>你用过vue，现在出了vue3.0介绍下</li><li>vue现在出了一个打包工具vite，介绍下为什么会比其他的打包工具快</li></ul><h2 id="字节跳动" tabindex="-1">字节跳动 <a class="header-anchor" href="#字节跳动" aria-label="Permalink to &quot;字节跳动&quot;">​</a></h2><ul><li>一面 <ul><li>介绍下项目，微前端实现</li><li>介绍下https加密过程</li><li>redux原理</li><li>第三方登录，如果让你去设计，你会怎么考虑</li><li>介绍下浏览器和node的事件循环</li><li>做了一道原型链输出问题</li><li>做了一道setTimeout输出问题</li><li>做了一道this.setState输出问题（异步和合并）</li><li>实现一下promise.race</li><li>实现一下task().eat().sleep(2000).eat().sleep(2000)函数</li><li>判断链表有环但是空间复杂度是O(1)</li></ul></li><li>二面 <ul><li>介绍下项目</li><li>redux用的熟么，介绍一下源码</li><li>react之connect怎么处理组件的</li><li>react之context会有什么性能问题么</li><li>实现防抖节流</li><li>实现sum(1)(2, 3)(4)柯里化</li><li>实现一个非树状结构转树状结构函数</li><li>一个查找最长子字符串算法</li></ul></li><li>三面 <ul><li>介绍下项目</li><li>微前端实现</li><li>乾坤框架如何做到隔离</li><li>实现一个String.prototype._trim函数</li><li>实现一个reduce</li><li>实现一个多个请求，并行和串行的函数</li><li>字节三面面试官有点严肃，一定多刷函数实现，算法(连续做一个月)，源码理解</li></ul></li></ul><h2 id="字节2" tabindex="-1">字节2 <a class="header-anchor" href="#字节2" aria-label="Permalink to &quot;字节2&quot;">​</a></h2><ol><li>对async、await的理理解，内部原理</li><li>介绍下Promise，内部实现</li><li>清除浮动</li><li>定位问题（绝对定位、相对定位等）</li><li>从输⼊入URL到⻚页⾯面加载全过程</li><li>tcp3次握⼿手</li><li>tcp属于哪⼀一层（1 物理层 -&gt; 2 数据链路路层 -&gt; 3 网络层(ip)-&gt; 4 传输层 (tcp) -&gt; 5 应用层(http)）</li><li>redux的设计思想</li><li>接⼊入redux的过程</li><li>绑定connect的过程</li><li>connect原理理</li><li>webpack介绍</li><li>== 和 ===的区别，什什么情况下⽤用相等==</li><li>bind、call、apply的区别</li><li>动画的了了解</li><li>介绍下原型链（解决的是继承问题吗）</li><li>对跨域的了了解</li></ol>`,14)]))}const y=i(n,[["render",p]]);export{h as __pageData,y as default};
